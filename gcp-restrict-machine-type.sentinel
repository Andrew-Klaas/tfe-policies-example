import "tfplan"

# Flatten tfplan's nested resource maps:
#   {"name": {"0": {"applied": {...}, "diff": {...} }, "1": {...}}, "name": {...}}
# ...to an array of resource bodies:
#   [{"applied": {...}, "diff": {...}}, {"applied": {...}, "diff": {...}}, ...]
get_resource_bodies = func(named_and_counted_resources) {
	result = []
	for named_and_counted_resources as _, instances {
		for instances as _, body {
			append(result, body)
		}
	}
	return result
}

# Get an array of all resources of the given type (or an empty array).
get_resources = func(type) {
	resources = []
	if length(tfplan.module_paths else []) > 0 { # always true in the real tfplan import
		for tfplan.module_paths as path {
			nested_resources = tfplan.module(path).resources[type] else {}
			resources += get_resource_bodies(nested_resources)
		}
	} else { # fallback for tests
		nested_resources = tfplan.resources[type] else {}
		resources += get_resource_bodies(nested_resources)
	}
	return resources
}

allowed_machine_types = [
	"n1-standard-1",
	"n1-standard-2",
	"n1-standard-4",
]

machine_type_allowed = rule {
	all get_resources("google_compute_instance") as r {
		r.applied.machine_type in allowed_machine_types
	}
}

main = rule {
	(machine_type_allowed) else true
}