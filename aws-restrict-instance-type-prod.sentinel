import "tfplan"

# Get an array of resource bodies of the given type (each body indexed by count),
# collected from all modules. (Returns an empty array if none found).
# Outline of structure:
# [ {"0": {"applied": {"instance_type": "..."}, "diff": {...}}, "1": {...}},
#   {"0": {...}},
#   ... ]
get_resources = func(type) {
	instances = []
	if length(tfplan.module_paths else []) > 0 { # always true in the real tfplan import
		for tfplan.module_paths as path {
			instances += values(tfplan.module(path).resources[type]) else []
		}
	} else { # fallback for tests
		instances += values(tfplan.resources[type]) else []
	}
	return instances
}

# Allowed Types
allowed_types = [
	"t2.small",
	"t2.medium",
	"t2.large",
	"t2.xlarge",
	"m4.large",
	"m4.xlarge",
]

aws_instances = get_resources("aws_instance")

# Rule to restrict instance types
instance_type_allowed = rule {
	all aws_instances as _index, instances {
		all instances as _count, r {
			r.applied.instance_type in allowed_types
		}
	}
}

# Main rule that requires other rules to be true
main = rule {
	(instance_type_allowed) else true
}